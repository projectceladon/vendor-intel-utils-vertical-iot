From 5ed230b9fdeaab0ede1a6b7a3fb4868d0bf683d0 Mon Sep 17 00:00:00 2001
From: "Suresh, Prashanth" <prashanth.suresh@intel.com>
Date: Thu, 21 Jul 2022 11:38:20 +0530
Subject: [PATCH 1/4] Remove limitation for total number of VF

Removed limitation of 4 for total number of VF

Tracked-On: OAM-102949
Signed-off-by: Suresh, Prashanth <prashanth.suresh@intel.com>
---
 src/guest/start.c | 2 --
 1 file changed, 2 deletions(-)

diff --git a/src/guest/start.c b/src/guest/start.c
index 2f05c19..4aa2658 100644
--- a/src/guest/start.c
+++ b/src/guest/start.c
@@ -404,8 +404,6 @@ static int set_available_vf(void)
 	}
 	close(fd);
 	total_vfs = strtoul(buf, NULL, 10);
-	/* Limit total VFs to conserve memory */
-	total_vfs = total_vfs > 4 ? 4 : total_vfs;
 
 	memset(buf, 0, sizeof(buf));
 	snprintf(buf, sizeof(buf), "%d", total_vfs);

From 9761fdd50c1a62d4c6218416dc22d9e5bd09f629 Mon Sep 17 00:00:00 2001
From: "Suresh, Prashanth" <prashanth.suresh@intel.com>
Date: Fri, 29 Jul 2022 14:09:06 +0530
Subject: [PATCH 2/4] Improve logic to enable VFs

Changes:
- added logic to check and enable VFs only when necessary

Tracked-On: OAM-102949
Signed-off-by: Suresh, Prashanth <prashanth.suresh@intel.com>
---
 src/guest/start.c | 99 ++++++++++++++++++++++++++++-------------------
 1 file changed, 60 insertions(+), 39 deletions(-)

diff --git a/src/guest/start.c b/src/guest/start.c
index 4aa2658..b3f12b9 100644
--- a/src/guest/start.c
+++ b/src/guest/start.c
@@ -373,7 +373,7 @@ static int setup_hugepages(GKeyFile *gkf)
 static int set_available_vf(void)
 {
 	int fd = 0;
-	int total_vfs = 0;
+	int total_vfs = 0, numvfs = 0;
 	int dev_id = 0;
 	ssize_t n = 0;
 	char buf[64] = { 0 };
@@ -405,57 +405,78 @@ static int set_available_vf(void)
 	close(fd);
 	total_vfs = strtoul(buf, NULL, 10);
 
-	memset(buf, 0, sizeof(buf));
-	snprintf(buf, sizeof(buf), "%d", total_vfs);
-
-	if (write_to_file(INTEL_GPU_DEV_PATH"/sriov_drivers_autoprobe", "0")) {
-		fprintf(stderr, "Unable to de-probe sriov drivers");
+	if (total_vfs == 0) {
+		fprintf(stderr, "Error: total number of supported VFs is 0");
 		return -1;
 	}
 
-	if (write_to_file("/sys/class/drm/card0/device/sriov_numvfs", buf)) {
-		fprintf(stderr, "Unable to de-probe sriov drivers");
-		return -1;
-	}
+	fd = open("/sys/class/drm/card0/device/sriov_numvfs", O_RDONLY);
+        if (fd == -1) {
+                fprintf(stderr, "open /sys/class/drm/card0/device/sriov_numvfs, errno=%d\n", errno);
+                return 0;
+        }
 
-	if (write_to_file(INTEL_GPU_DEV_PATH"/sriov_drivers_autoprobe", "1")) {
-		fprintf(stderr, "Unable to auto-probe sriov drivers");
-		return -1;
-	}
+        n = read(fd, buf, sizeof(buf));
+        if (n == -1) {
+                fprintf(stderr, "read /sys/class/drm/card0/device//sriov_numvfs failed, errno=%d\n", errno);
+                close(fd);
+                return 0;
+        }
+        close(fd);
+        numvfs = strtoul(buf, NULL, 10);
 
-	/* Get device ID */
-	fd = open(INTEL_GPU_DEV_PATH"/device", O_RDONLY);
-	if (fd == -1) {
-		fprintf(stderr, "open %s failed, errno=%d\n", INTEL_GPU_DEV_PATH"/device", errno);
-		return -1;
-	}
+	if (numvfs < total_vfs) {
+		memset(buf, 0, sizeof(buf));
+		snprintf(buf, sizeof(buf), "%d", total_vfs);
 
-	n = read(fd, buf, sizeof(buf));
-	if (n == -1) {
-		fprintf(stderr, "read %s failed, errno=%d\n", INTEL_GPU_DEV_PATH"/device", errno);
-		close(fd);
-		return -1;
-	}
-	close(fd);
-	dev_id = strtol(buf, NULL, 16);
+		if (write_to_file(INTEL_GPU_DEV_PATH"/sriov_drivers_autoprobe", "0")) {
+		fprintf(stderr, "Unable to de-probe sriov drivers");
+			return -1;
+		}
+
+		if (write_to_file("/sys/class/drm/card0/device/sriov_numvfs", buf)) {
+			fprintf(stderr, "Unable to de-probe sriov drivers");
+			return -1;
+		}
 
+		if (write_to_file(INTEL_GPU_DEV_PATH"/sriov_drivers_autoprobe", "1")) {
+			fprintf(stderr, "Unable to auto-probe sriov drivers");
+			return -1;
+		}
 
-	memset(buf, 0, sizeof(buf));
-	snprintf(buf, sizeof(buf), "8086 %x", dev_id);
+		/* Get device ID */
+		fd = open(INTEL_GPU_DEV_PATH"/device", O_RDONLY);
+		if (fd == -1) {
+			fprintf(stderr, "open %s failed, errno=%d\n", INTEL_GPU_DEV_PATH"/device", errno);
+			return -1;
+		}
 
-	/* Create new vfio id for GPU */
-	ret = write_to_file(PCI_DRIVER_PATH"vfio-pci/new_id", buf);
-	if (ret == EEXIST) {
-		if (write_to_file("/sys/bus/pci/drivers/vfio-pci/remove_id", buf)) {
-			fprintf(stderr, "Cannot remove original GPU vfio id\n");
+		n = read(fd, buf, sizeof(buf));
+		if (n == -1) {
+			fprintf(stderr, "read %s failed, errno=%d\n", INTEL_GPU_DEV_PATH"/device", errno);
+			close(fd);
 			return -1;
 		}
-		if (write_to_file(PCI_DRIVER_PATH"vfio-pci/new_id", buf)) {
-			fprintf(stderr, "Cannot add new GPU vfio id\n");
+		close(fd);
+		dev_id = strtol(buf, NULL, 16);
+
+		memset(buf, 0, sizeof(buf));
+		snprintf(buf, sizeof(buf), "8086 %x", dev_id);
+
+		/* Create new vfio id for GPU */
+		ret = write_to_file(PCI_DRIVER_PATH"vfio-pci/new_id", buf);
+		if (ret == EEXIST) {
+			if (write_to_file("/sys/bus/pci/drivers/vfio-pci/remove_id", buf)) {
+				fprintf(stderr, "Cannot remove original GPU vfio id\n");
+				return -1;
+			}
+			if (write_to_file(PCI_DRIVER_PATH"vfio-pci/new_id", buf)) {
+				fprintf(stderr, "Cannot add new GPU vfio id\n");
+				return -1;
+			}
+		} else if (ret != 0) {
 			return -1;
 		}
-	} else if (ret != 0) {
-		return -1;
 	}
 
 	for (i = 1; i < total_vfs; i++) {

From afc1d10b2ca36a1f69cfdb16d990f1b789488e76 Mon Sep 17 00:00:00 2001
From: "Suresh, Prashanth" <prashanth.suresh@intel.com>
Date: Fri, 29 Jul 2022 15:18:02 +0530
Subject: [PATCH 3/4] Configure VF time settings

Change:
- added configuration of VF time settings before launching guest

Tracked-On: OAM-102949
Signed-off-by: Suresh, Prashanth <prashanth.suresh@intel.com>
---
 src/guest/start.c | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/src/guest/start.c b/src/guest/start.c
index b3f12b9..e3b19c8 100644
--- a/src/guest/start.c
+++ b/src/guest/start.c
@@ -377,6 +377,7 @@ static int set_available_vf(void)
 	int dev_id = 0;
 	ssize_t n = 0;
 	char buf[64] = { 0 };
+	char timeout_file[64] = { 0 };
 	int i;
 	int ret = 0;
 
@@ -479,7 +480,7 @@ static int set_available_vf(void)
 		}
 	}
 
-	for (i = 1; i < total_vfs; i++) {
+	for (i = 1; i < numvfs; i++) {
 		memset(buf, 0, sizeof(buf));
 		snprintf(buf, sizeof(buf), "/sys/bus/pci/devices/0000:00:02.%d/enable", i);
 		fd = open(buf, O_RDONLY);
@@ -497,6 +498,13 @@ static int set_available_vf(void)
 		}
 		close(fd);
 		if (strtol(buf, NULL, 10) == 0) {
+			//Configure timeout values
+			snprintf(timeout_file, sizeof(timeout_file), "/sys/class/drm/card0/iov/vf%d/gt/preempt_timeout_us", i);
+			snprintf(buf, sizeof(buf), "%d", 50000);
+			write_to_file(timeout_file, buf);
+			snprintf(timeout_file, sizeof(timeout_file), "/sys/class/drm/card0/iov/vf%d/gt/exec_quantum_ms", i);
+			snprintf(buf, sizeof(buf), "%d", 25);
+			write_to_file(timeout_file, buf);
 			return i;
 		}
 	}

From 37b06932c8709df6750eea17efb1652394046f15 Mon Sep 17 00:00:00 2001
From: "Suresh, Prashanth" <prashanth.suresh@intel.com>
Date: Tue, 2 Aug 2022 21:31:11 +0530
Subject: [PATCH 4/4] Added deallocation of hugepg during cleanup

Deallocate hugepages after VM close.

Tracked-On: OAM-102949
Signed-off-by: Suresh, Prashanth <prashanth.suresh@intel.com>
---
 src/guest/start.c | 51 ++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 50 insertions(+), 1 deletion(-)

diff --git a/src/guest/start.c b/src/guest/start.c
index e3b19c8..1119ae7 100644
--- a/src/guest/start.c
+++ b/src/guest/start.c
@@ -579,6 +579,55 @@ static void cleanup_passthrough(void) {
 	}
 }
 
+static void cleanup_hugepages(void) {
+	int free_hugepg = 0;
+        int nr_hugepg = 0;
+	char buf[64] = { 0 };
+	int fd = 0;
+        ssize_t n = 0;
+
+	/* Get free hugepages */
+        fd = open("/sys/kernel/mm/hugepages/hugepages-2048kB/free_hugepages", O_RDONLY);
+        if (fd == -1) {
+                fprintf(stderr, "open /sys/kernel/mm/hugepages/hugepages-2048kB/free_hugepages failed, errno=%d\n", errno);
+                return;
+        }
+
+        n = read(fd, buf, sizeof(buf));
+        if (n == -1) {
+                fprintf(stderr, "read /sys/kernel/mm/hugepages/hugepages-2048kB/free_hugepages failed, errno=%d\n", errno);
+                close(fd);
+                return;
+        }
+        close(fd);
+        free_hugepg = strtoul(buf, NULL, 10);
+
+	/* Get nr hugepages */
+        fd = open("/sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages", O_RDONLY);
+        if (fd == -1) {
+                fprintf(stderr, "open /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages failed, errno=%d\n", errno);
+                return;
+        }
+
+        n = read(fd, buf, sizeof(buf));
+        if (n == -1) {
+                fprintf(stderr, "read /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages failed, errno=%d\n", errno);
+                close(fd);
+                return;
+        }
+        close(fd);
+        nr_hugepg = strtoul(buf, NULL, 10);
+
+	if (free_hugepg == nr_hugepg) {
+		fprintf(stderr, "Restoring hugepages.\n");
+		snprintf(buf, sizeof(buf), "%d", 0);
+		if (write_to_file("/sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages", buf)) {
+			fprintf(stderr, "Failed to write /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages!\n");
+			return;
+	        }
+	}
+}
+
 static int check_soundcard_on_host(){
         int ret = system("cat /proc/asound/cards | grep sof");
         return ret;
@@ -599,7 +648,7 @@ static void cleanup(int num, int removed_sof_tgl_snd_module)
 	cleanup_passthrough();
 	if(removed_sof_tgl_snd_module)
 		insert_sof_tgl_snd_module();
-
+	//cleanup_hugepages();
 	exit(130);
 }
 
