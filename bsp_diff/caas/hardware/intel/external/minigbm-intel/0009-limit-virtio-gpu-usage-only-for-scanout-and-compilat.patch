From a830ef35d4bc461e0f4c6676d0e76dc473a6007d Mon Sep 17 00:00:00 2001
From: Dongwon Kim <dongwon.kim@intel.com>
Date: Tue, 5 Jul 2022 23:49:48 +0530
Subject: [PATCH 4/5] limit virtio gpu usage only for scanout and compilation
 fix

In Android VM setting, current gralloc uses virtio-gpu to allocate all
GPU buffers regardless of usage of it. To prevent any possible
incompatibility between virtio-gpu allocated buffer and intel-driver
driven rendering process, we limit virtio-gpu only to allocate scanout
buffers while any other buffers (i.e. rendering target, texture and
so on) allocated via i915.

Tracked-On: OAM-102839
Signed-off-by: Shekhar Chauhan <shekhar.chauhan@intel.com>

---
 Android.bp                                    |   9 +-
 cros_gralloc/cros_gralloc_driver.cc           | 162 ++++++++++++++----
 cros_gralloc/cros_gralloc_driver.h            |   8 +-
 cros_gralloc/cros_gralloc_handle.h            |   1 +
 cros_gralloc/gralloc1/cros_gralloc1_module.cc |   1 +
 5 files changed, 141 insertions(+), 40 deletions(-)

diff --git a/Android.bp b/Android.bp
index b575b13..cd45ffc 100644
--- a/Android.bp
+++ b/Android.bp
@@ -39,6 +39,7 @@ cc_defaults {
         "-Wno-switch",
         "-Wno-format",
         "-Wno-unused-variable",
+	"-DDRV_I915",
         "-DDRV_VIRTIO_GPU",
         "-DUSE_GRALLOC1",
         "-Wno-cast-qual",
@@ -84,6 +85,7 @@ cc_defaults {
     ],
 
     cflags: [
+	"-DDRV_I915",
         "-DDRV_VIRTIO_GPU",
         "-DUSE_GRALLOC1",
     ],
@@ -138,7 +140,10 @@ cc_library_shared {
             enabled: true,
         },
     },
-    cflags: ["-DDRV_VIRTIO_GPU"],
+    cflags: [
+        "-DDRV_I915",
+        "-DDRV_VIRTIO_GPU",
+    ],
     srcs: ["cros_gralloc/gralloc0/gralloc0.cc"],
 }
 
@@ -154,6 +159,7 @@ cc_library_shared {
         },
     },
     cflags: [
+	"-DDRV_I915",
         "-DDRV_VIRTIO_GPU",
         "-DUSE_GRALLOC1",
     ],
@@ -173,6 +179,7 @@ cc_library_shared {
         },
     },
     cflags: [
+	"-DDRV_I915",
         "-DDRV_VIRTIO_GPU",
         "-DUSE_GRALLOC1",
     ],
diff --git a/cros_gralloc/cros_gralloc_driver.cc b/cros_gralloc/cros_gralloc_driver.cc
index 7ebeb1b..7c25b5e 100644
--- a/cros_gralloc/cros_gralloc_driver.cc
+++ b/cros_gralloc/cros_gralloc_driver.cc
@@ -15,12 +15,15 @@
 #include "../helpers.h"
 #include "../util.h"
 
+#include <log/log.h>
 #ifdef USE_GRALLOC1
 #include "i915_private_android.h"
 #endif
 
-cros_gralloc_driver::cros_gralloc_driver() : drv_(nullptr)
+cros_gralloc_driver::cros_gralloc_driver()
 {
+	drv_kms = nullptr;
+	drv_render = nullptr;
 }
 
 cros_gralloc_driver::~cros_gralloc_driver()
@@ -28,12 +31,17 @@ cros_gralloc_driver::~cros_gralloc_driver()
 	buffers_.clear();
 	handles_.clear();
 
-	
+	if (drv_kms) {
+		int fd = drv_get_fd(drv_kms);
+		drv_destroy(drv_kms);
+		drv_kms = nullptr;
+		close(fd);
+	}
 
-	if (drv_) {
-		int fd = drv_get_fd(drv_);
-		drv_destroy(drv_);
-		drv_ = nullptr;
+	if (drv_render) {
+		int fd = drv_get_fd(drv_render);
+		drv_destroy(drv_render);
+		drv_render = nullptr;
 		close(fd);
 	}
 }
@@ -41,52 +49,113 @@ cros_gralloc_driver::~cros_gralloc_driver()
 int32_t cros_gralloc_driver::init()
 {
 	/*
-	 * Create a driver from render node while filtering out
+	 * Create a driver from kmsnode and rendernode while filtering out
 	 * the specified undesired driver.
 	 *
 	 * TODO(gsingh): Enable render nodes on udl/evdi.
 	 */
 
 	int fd;
+	char const *str = "%s/renderD%d";
 	drmVersionPtr version;
-	char const *str = "%s/renderD129";
-	const char *undesired[2] = { "vgem", nullptr };
+#ifdef DRV_VIRTIO_GPU
+	// virtio-gpu used as kms only device
+	const char *kms_name = "virtio_gpu";
+#else
+	// kms == render
+	const char *kms_name = nullptr;
+#endif
+	const char *undesired_rdev[] = {"virtio_gpu", "vgem"};
 	uint32_t num_nodes = 63;
 	uint32_t min_node = 128;
 	uint32_t max_node = (min_node + num_nodes);
+	uint32_t j;
+	char *node;
+
+	// destroy drivers if exist before re-initializing them
+	if (drv_kms) {
+		int fd = drv_get_fd(drv_kms);
+		drv_destroy(drv_kms);
+		drv_kms = nullptr;
+		close(fd);
+	}
 
-	for (uint32_t i = 0; i < ARRAY_SIZE(undesired); i++) {
-		for (uint32_t j = min_node; j < max_node; j++) {
-			char *node;
-			if (asprintf(&node, str, DRM_DIR_NAME, j) < 0)
-				continue;
+	if (drv_render) {
+		int fd = drv_get_fd(drv_render);
+		drv_destroy(drv_render);
+		drv_render = nullptr;
+		close(fd);
+	}
 
-			fd = open(node, O_RDWR, 0);
-			free(node);
-			if (fd < 0)
-				continue;
+	for (uint32_t i = min_node; i < max_node; i++) {
+		if (asprintf(&node, str, DRM_DIR_NAME, i) < 0)
+			continue;
 
-			version = drmGetVersion(fd);
-			if (!version) {
+		fd = open(node, O_RDWR, 0);
+		free(node);
+		if (fd < 0)
+			continue;
+		version = drmGetVersion(fd);
+		if (!version) {
+			drmFreeVersion(version);
+			close(fd);
+			continue;
+		}
+		if (!drv_kms && kms_name && !strcmp(version->name, kms_name)) {
+			drmFreeVersion(version);
+			drv_kms = drv_create(fd);
+			if (!drv_kms) {
+				drv_log("Failed to create driver for KMS (Display only) device\n");
 				close(fd);
-				continue;
+				goto fail;
 			}
 
+			if (drv_render)
+				return 0;
 
-			if (undesired[i] && !strcmp(version->name, undesired[i])) {
-				close(fd);
+			continue;
+		}
+
+		for (j = 0; j < ARRAY_SIZE(undesired_rdev); j++) {
+			if (!strcmp(version->name, undesired_rdev[j])) {
 				drmFreeVersion(version);
-				continue;
+				close(fd);
+				break;
 			}
+		}
 
-			drmFreeVersion(version);
-			drv_ = drv_create(fd);
-			if (drv_)
-				return 0;
+		// hit any of undesired render node
+		if (j < ARRAY_SIZE(undesired_rdev))
+			continue;
 
+		drv_render = drv_create(fd);
+		if (!drv_render) {
+			drv_log("Failed to create driver for render only device\n");
 			close(fd);
+			goto fail;
 		}
+		// if kms_name is null, kms_node == render_node
+		if (!kms_name)
+			drv_kms = drv_render;
+
+		// return success if both nodes exist
+		if (drv_kms)
+			return 0;
+	}
+
+fail:
+	if (drv_kms) {
+		fd = drv_get_fd(drv_kms);
+		drv_destroy(drv_kms);
+		close(fd);
+		drv_kms = nullptr;
+	}
 
+	if (drv_render) {
+		fd = drv_get_fd(drv_render);
+		drv_destroy(drv_render);
+		close(fd);
+		drv_render = nullptr;
 	}
 
 	return -ENODEV;
@@ -97,8 +166,10 @@ bool cros_gralloc_driver::is_supported(struct cros_gralloc_buffer_descriptor *de
 	struct combination *combo;
 	uint32_t resolved_format;
 	bool supported;
-	resolved_format = drv_resolve_format(drv_, descriptor->drm_format, descriptor->use_flags);
-	combo = drv_get_combination(drv_, resolved_format, descriptor->use_flags);
+	struct driver *drv = (descriptor->use_flags & BO_USE_SCANOUT) ? drv_kms : drv_render;
+
+	resolved_format = drv_resolve_format(drv, descriptor->drm_format, descriptor->use_flags);
+	combo = drv_get_combination(drv, resolved_format, descriptor->use_flags);
 
 	supported = (combo != nullptr);
 
@@ -111,7 +182,7 @@ bool cros_gralloc_driver::is_supported(struct cros_gralloc_buffer_descriptor *de
                                             (descriptor->use_flags) & (~BO_USE_SCANOUT));
 				supported = (combo != nullptr);
 			} else {
-				drv = drv_render_;
+				drv = drv_render;
 				descriptor->use_flags &= ~BO_USE_SCANOUT;
 				combo = drv_get_combination(drv, resolved_format, descriptor->use_flags);
 		                supported = (combo != nullptr);
@@ -160,12 +231,22 @@ int32_t cros_gralloc_driver::allocate(const struct cros_gralloc_buffer_descripto
 	uint64_t use_flags;
 	int32_t reserved_region_fd;
 	char *name;
+	bool kms;
 
 	struct bo *bo;
 	struct cros_gralloc_handle *hnd;
 
 
-	resolved_format = drv_resolve_format(drv_, descriptor->drm_format, descriptor->use_flags);
+	struct driver *drv;
+
+	if ((descriptor->use_flags & BO_USE_SCANOUT)) {
+		kms = true;
+		drv = drv_kms;
+	} else {
+		drv = drv_render;
+	}
+
+	resolved_format = drv_resolve_format(drv, descriptor->drm_format, descriptor->use_flags);
 	use_flags = descriptor->use_flags;
 	/*
 	 * TODO(b/79682290): ARC++ assumes NV12 is always linear and doesn't
@@ -187,14 +268,14 @@ int32_t cros_gralloc_driver::allocate(const struct cros_gralloc_buffer_descripto
 
 #ifdef USE_GRALLOC1
 	if (descriptor->modifier == 0) {
-		bo = drv_bo_create(drv_, descriptor->width, descriptor->height, resolved_format,
+		bo = drv_bo_create(drv, descriptor->width, descriptor->height, resolved_format,
 				   use_flags);
 	} else {
-		bo = drv_bo_create_with_modifiers(drv_, descriptor->width, descriptor->height,
+		bo = drv_bo_create_with_modifiers(drv, descriptor->width, descriptor->height,
 						  resolved_format, &descriptor->modifier, 1);
 	}
 #else
-	bo = drv_bo_create(drv_, descriptor->width, descriptor->height, resolved_format, use_flags);
+	bo = drv_bo_create(drv, descriptor->width, descriptor->height, resolved_format, use_flags);
 #endif
 	if (!bo) {
 		drv_log("Failed to create bo.\n");
@@ -240,6 +321,7 @@ int32_t cros_gralloc_driver::allocate(const struct cros_gralloc_buffer_descripto
 	 * native_handle_delete().
 	 */
 	hnd = static_cast<struct cros_gralloc_handle *>(malloc(num_bytes));
+	hnd->kms = kms;
 	hnd->base.version = sizeof(hnd->base);
 	hnd->base.numFds = num_fds;
 	hnd->base.numInts = num_ints;
@@ -301,6 +383,7 @@ int32_t cros_gralloc_driver::retain(buffer_handle_t handle)
 {
 	uint32_t id;
 	std::lock_guard<std::mutex> lock(mutex_);
+	struct driver *drv;
 
 	auto hnd = cros_gralloc_convert_handle(handle);
 	if (!hnd) {
@@ -308,6 +391,7 @@ int32_t cros_gralloc_driver::retain(buffer_handle_t handle)
 		return -EINVAL;
 	}
 
+	drv = (hnd->kms) ? drv_kms : drv_render;
 
 	auto buffer = get_buffer(hnd);
 	if (buffer) {
@@ -316,7 +400,7 @@ int32_t cros_gralloc_driver::retain(buffer_handle_t handle)
 		return 0;
 	}
 
-	if (drmPrimeFDToHandle(drv_get_fd(drv_), hnd->fds[0], &id)) {
+	if (drmPrimeFDToHandle(drv_get_fd(drv), hnd->fds[0], &id)) {
 		drv_log("drmPrimeFDToHandle failed.\n");
 		return -errno;
 	}
@@ -340,7 +424,7 @@ int32_t cros_gralloc_driver::retain(buffer_handle_t handle)
 			data.format_modifiers[plane] = hnd->format_modifier;
 		}
 
-		bo = drv_bo_import(drv_, &data);
+		bo = drv_bo_import(drv, &data);
 		if (!bo)
 			return -EFAULT;
 
@@ -569,7 +653,9 @@ int32_t cros_gralloc_driver::get_reserved_region(buffer_handle_t handle,
 
 uint32_t cros_gralloc_driver::get_resolved_drm_format(uint32_t drm_format, uint64_t usage)
 {
-	return drv_resolve_format(drv_, drm_format, usage);
+	struct driver *drv = (usage & BO_USE_SCANOUT) ? drv_kms : drv_render;
+
+	return drv_resolve_format(drv, drm_format, usage);
 }
 
 cros_gralloc_buffer *cros_gralloc_driver::get_buffer(cros_gralloc_handle_t hnd)
diff --git a/cros_gralloc/cros_gralloc_driver.h b/cros_gralloc/cros_gralloc_driver.h
index ec1fb48..22d1074 100644
--- a/cros_gralloc/cros_gralloc_driver.h
+++ b/cros_gralloc/cros_gralloc_driver.h
@@ -50,6 +50,11 @@ class cros_gralloc_driver
 
 	void for_each_handle(const std::function<void(cros_gralloc_handle_t)> &function);
 
+	bool is_kmsro_enabled()
+	{
+		return drv_kms != drv_render;
+	};
+
 	bool IsSupportedYUVFormat(uint32_t droid_format);
 
       private:
@@ -57,7 +62,8 @@ class cros_gralloc_driver
 	cros_gralloc_driver operator=(cros_gralloc_driver const &);
 	cros_gralloc_buffer *get_buffer(cros_gralloc_handle_t hnd);
 
-	struct driver *drv_;
+	struct driver *drv_kms;
+	struct driver *drv_render;
 	std::mutex mutex_;
 	std::unordered_map<uint32_t, cros_gralloc_buffer *> buffers_;
 	std::unordered_map<cros_gralloc_handle_t, std::pair<cros_gralloc_buffer *, int32_t>>
diff --git a/cros_gralloc/cros_gralloc_handle.h b/cros_gralloc/cros_gralloc_handle.h
index 4c53899..75cc1f9 100644
--- a/cros_gralloc/cros_gralloc_handle.h
+++ b/cros_gralloc/cros_gralloc_handle.h
@@ -27,6 +27,7 @@ struct cros_gralloc_handle {
 	uint32_t strides[DRV_MAX_PLANES];
 	uint32_t offsets[DRV_MAX_PLANES];
 	uint32_t sizes[DRV_MAX_PLANES];
+	bool kms;
 	uint32_t id;
 	uint32_t width;
 	uint32_t height;
diff --git a/cros_gralloc/gralloc1/cros_gralloc1_module.cc b/cros_gralloc/gralloc1/cros_gralloc1_module.cc
index cbc4782..9fa1c35 100644
--- a/cros_gralloc/gralloc1/cros_gralloc1_module.cc
+++ b/cros_gralloc/gralloc1/cros_gralloc1_module.cc
@@ -386,6 +386,7 @@ int32_t CrosGralloc1::allocate(struct cros_gralloc_buffer_descriptor *descriptor
 	    cros_gralloc1_convert_usage(descriptor->producer_usage, descriptor->consumer_usage);
 	descriptor->use_flags = usage;
 
+	bool supported = driver->is_supported(descriptor);
 	if (!supported && (descriptor->consumer_usage & GRALLOC1_CONSUMER_USAGE_HWCOMPOSER)) {
                  descriptor->use_flags &= ~BO_USE_SCANOUT;
                  supported = driver->is_supported(descriptor);
-- 
2.17.1

