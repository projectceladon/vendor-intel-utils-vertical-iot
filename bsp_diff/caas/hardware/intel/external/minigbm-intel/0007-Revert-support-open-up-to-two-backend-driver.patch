From 40ce54b1af1df77346c6e18d9a9516bd5adad0f5 Mon Sep 17 00:00:00 2001
From: "Kalenahally Madegowda, NandishaX" <nandishax.kalenahally.madegowda@intel.com>
Date: Tue, 5 Jul 2022 16:25:50 +0530
Subject: [PATCH 2/5] Revert support open up to two backend driver

This reverts commit eb65db4374430a16cf396a46edafb1a7d835c990
Tracked-On: OAM-102839
Signed-of-by: Shekhar Chauhan <shekhar.chauhan@intel.com>
---
 Android.bp                                    |   1 -
 Makefile                                      |   4 +-
 cros_gralloc/cros_gralloc_driver.cc           | 162 ++++--------------
 cros_gralloc/cros_gralloc_driver.h            |   7 +-
 cros_gralloc/cros_gralloc_handle.h            |   1 -
 cros_gralloc/gralloc1/cros_gralloc1_module.cc |   5 +
 .../gralloc4/CrosGralloc4Allocator.cc         |   7 +
 drv.c                                         |  10 +-
 8 files changed, 51 insertions(+), 146 deletions(-)

diff --git a/Android.bp b/Android.bp
index 43fd42a..4aa6a22 100644
--- a/Android.bp
+++ b/Android.bp
@@ -40,7 +40,6 @@ cc_defaults {
         "-Wno-format",
         "-Wno-unused-variable",
         "-DDRV_I915",
-        "-DDRV_VIRTIO_GPU",
         "-DUSE_GRALLOC1",
         "-Wno-cast-qual",
     ],
diff --git a/Makefile b/Makefile
index a9b7100..35f92f2 100644
--- a/Makefile
+++ b/Makefile
@@ -34,9 +34,7 @@ endif
 ifdef DRV_VC4
 	CFLAGS += $(shell $(PKG_CONFIG) --cflags libdrm_vc4)
 endif
-ifdef DRV_VIRTIO_GPU
-	CFLAGS += $(shell $(PKG_CONFIG) --cflags libdrm_intel)
-endif
+
 CPPFLAGS += $(PC_CFLAGS)
 LDLIBS += $(PC_LIBS)
 
diff --git a/cros_gralloc/cros_gralloc_driver.cc b/cros_gralloc/cros_gralloc_driver.cc
index a7bd405..d7e4cda 100644
--- a/cros_gralloc/cros_gralloc_driver.cc
+++ b/cros_gralloc/cros_gralloc_driver.cc
@@ -19,9 +19,7 @@
 #include "i915_private_android.h"
 #endif
 
-// drv_kms_ aim to open the display node
-// drv_render_ aim to open the render node
-cros_gralloc_driver::cros_gralloc_driver() : drv_kms_(nullptr), drv_render_(nullptr)
+cros_gralloc_driver::cros_gralloc_driver() : drv_(nullptr)
 {
 }
 
@@ -30,17 +28,12 @@ cros_gralloc_driver::~cros_gralloc_driver()
 	buffers_.clear();
 	handles_.clear();
 
-	if (drv_kms_) {
-		int fd = drv_get_fd(drv_kms_);
-		drv_destroy(drv_kms_);
-		drv_kms_ = nullptr;
-		close(fd);
-	}
+	
 
-	if (drv_render_) {
-		int fd = drv_get_fd(drv_render_);
-		drv_destroy(drv_render_);
-		drv_render_ = nullptr;
+	if (drv_) {
+		int fd = drv_get_fd(drv_);
+		drv_destroy(drv_);
+		drv_ = nullptr;
 		close(fd);
 	}
 }
@@ -48,7 +41,7 @@ cros_gralloc_driver::~cros_gralloc_driver()
 int32_t cros_gralloc_driver::init()
 {
 	/*
-	 * Create a driver from display node or/and render node while filtering out
+	 * Create a driver from render node while filtering out
 	 * the specified undesired driver.
 	 *
 	 * TODO(gsingh): Enable render nodes on udl/evdi.
@@ -61,110 +54,39 @@ int32_t cros_gralloc_driver::init()
 	uint32_t num_nodes = 63;
 	uint32_t min_node = 128;
 	uint32_t max_node = (min_node + num_nodes);
-	uint32_t j;
-	char *node;
-
-	// destroy drivers if exist before re-initializing them
-	if (drv_kms_) {
-		int fd = drv_get_fd(drv_kms_);
-		drv_destroy(drv_kms_);
-		drv_kms_ = nullptr;
-		close(fd);
-	}
 
-	if (drv_render_) {
-		int fd = drv_get_fd(drv_render_);
-		drv_destroy(drv_render_);
-		drv_render_ = nullptr;
-		close(fd);
-	}
-
-	for (uint32_t i = min_node; i < max_node; i++) {
-		if (asprintf(&node, str, DRM_DIR_NAME, i) < 0)
-			continue;
+	for (uint32_t i = 0; i < ARRAY_SIZE(undesired); i++) {
+		for (uint32_t j = min_node; j < max_node; j++) {
+			char *node;
+			if (asprintf(&node, str, DRM_DIR_NAME, j) < 0)
+				continue;
 
-		fd = open(node, O_RDWR, 0);
-		free(node);
-		if (fd < 0)
-			continue;
+			fd = open(node, O_RDWR, 0);
+			free(node);
+			if (fd < 0)
+				continue;
 
-		version = drmGetVersion(fd);
-		if (!version) {
-			drmFreeVersion(version);
-			close(fd);
-			continue;
-		}
-
-		for (j = 0; j < ARRAY_SIZE(undesired); j++) {
-			if (undesired[j] && !strcmp(version->name, undesired[j])) {
-				drmFreeVersion(version);
+			version = drmGetVersion(fd);
+			if (!version) {
 				close(fd);
-				break;
+				continue;
 			}
-		}
 
-		// hit any of undesired render node
-		if (j < ARRAY_SIZE(undesired))
-			continue;
 
-		/* While in the KMOSR mode, need open two backend driver, need specify
-		 * the drv_kms_ to open the virtio_gpu node.
-		 */
-		if (!strcmp(version->name, "virtio_gpu")) {
-			drmFreeVersion(version);
-			drv_kms_ = drv_create(fd);
-			if (!drv_kms_) {
-				drv_log("Failed to create driver for virtio device\n");
+			if (undesired[i] && !strcmp(version->name, undesired[i])) {
 				close(fd);
-				goto fail;
+				drmFreeVersion(version);
+				continue;
 			}
 
-			// return success if both nodes exist
-			if (drv_render_)
+			drmFreeVersion(version);
+			drv_ = drv_create(fd);
+			if (drv_)
 				return 0;
 
-			continue;
-		}
-
-		drmFreeVersion(version);
-		drv_render_ = drv_create(fd);
-		if (!drv_render_) {
-			drv_log("Failed to create driver for render only device\n");
 			close(fd);
-			goto fail;
 		}
 
-		// return success if both nodes exist
-		if (drv_kms_)
-			return 0;
-		continue;
-	}
-
-	// if only have one node, set drv_render_ == drv_kms_
-	if (drv_kms_ && !drv_render_)
-		drv_render_ = drv_kms_;
-	if (drv_render_ && !drv_kms_)
-		drv_kms_ = drv_render_;
-
-	// if no node is found, return error
-	if (!drv_render_ && !drv_kms_)
-		return -ENODEV;
-
-	return 0;
-
-fail:
-	if (drv_kms_) {
-		fd = drv_get_fd(drv_kms_);
-		drv_destroy(drv_kms_);
-		close(fd);
-		drv_kms_ = nullptr;
-	}
-
-	if (drv_render_) {
-		fd = drv_get_fd(drv_render_);
-		drv_destroy(drv_render_);
-		close(fd);
-		drv_render_ = nullptr;
 	}
 
 	return -ENODEV;
@@ -175,10 +97,8 @@ bool cros_gralloc_driver::is_supported(struct cros_gralloc_buffer_descriptor *de
 	struct combination *combo;
 	uint32_t resolved_format;
 	bool supported;
-	struct driver *drv = (descriptor->use_flags & BO_USE_SCANOUT) ? drv_kms_ : drv_render_;
-
-	resolved_format = drv_resolve_format(drv, descriptor->drm_format, descriptor->use_flags);
-	combo = drv_get_combination(drv, resolved_format, descriptor->use_flags);
+	resolved_format = drv_resolve_format(drv_, descriptor->drm_format, descriptor->use_flags);
+	combo = drv_get_combination(drv_, resolved_format, descriptor->use_flags);
 
 	supported = (combo != nullptr);
 
@@ -240,21 +160,12 @@ int32_t cros_gralloc_driver::allocate(const struct cros_gralloc_buffer_descripto
 	uint64_t use_flags;
 	int32_t reserved_region_fd;
 	char *name;
-	bool from_kms = false;
 
 	struct bo *bo;
 	struct cros_gralloc_handle *hnd;
 
-	struct driver *drv;
 
-	if ((descriptor->use_flags & BO_USE_SCANOUT)) {
-		from_kms = true;
-		drv = drv_kms_;
-	} else {
-		drv = drv_render_;
-	}
-
-	resolved_format = drv_resolve_format(drv, descriptor->drm_format, descriptor->use_flags);
+	resolved_format = drv_resolve_format(drv_, descriptor->drm_format, descriptor->use_flags);
 	use_flags = descriptor->use_flags;
 	/*
 	 * TODO(b/79682290): ARC++ assumes NV12 is always linear and doesn't
@@ -276,14 +187,14 @@ int32_t cros_gralloc_driver::allocate(const struct cros_gralloc_buffer_descripto
 
 #ifdef USE_GRALLOC1
 	if (descriptor->modifier == 0) {
-		bo = drv_bo_create(drv, descriptor->width, descriptor->height, resolved_format,
+		bo = drv_bo_create(drv_, descriptor->width, descriptor->height, resolved_format,
 				   use_flags);
 	} else {
-		bo = drv_bo_create_with_modifiers(drv, descriptor->width, descriptor->height,
+		bo = drv_bo_create_with_modifiers(drv_, descriptor->width, descriptor->height,
 						  resolved_format, &descriptor->modifier, 1);
 	}
 #else
-	bo = drv_bo_create(drv, descriptor->width, descriptor->height, resolved_format, use_flags);
+	bo = drv_bo_create(drv_, descriptor->width, descriptor->height, resolved_format, use_flags);
 #endif
 	if (!bo) {
 		drv_log("Failed to create bo.\n");
@@ -329,7 +240,6 @@ int32_t cros_gralloc_driver::allocate(const struct cros_gralloc_buffer_descripto
 	 * native_handle_delete().
 	 */
 	hnd = static_cast<struct cros_gralloc_handle *>(malloc(num_bytes));
-	hnd->from_kms = from_kms;
 	hnd->base.version = sizeof(hnd->base);
 	hnd->base.numFds = num_fds;
 	hnd->base.numInts = num_ints;
@@ -391,7 +301,6 @@ int32_t cros_gralloc_driver::retain(buffer_handle_t handle)
 {
 	uint32_t id;
 	std::lock_guard<std::mutex> lock(mutex_);
-	struct driver *drv;
 
 	auto hnd = cros_gralloc_convert_handle(handle);
 	if (!hnd) {
@@ -399,7 +308,6 @@ int32_t cros_gralloc_driver::retain(buffer_handle_t handle)
 		return -EINVAL;
 	}
 
-	drv = (hnd->from_kms) ? drv_kms_ : drv_render_;
 
 	auto buffer = get_buffer(hnd);
 	if (buffer) {
@@ -408,7 +316,7 @@ int32_t cros_gralloc_driver::retain(buffer_handle_t handle)
 		return 0;
 	}
 
-	if (drmPrimeFDToHandle(drv_get_fd(drv), hnd->fds[0], &id)) {
+	if (drmPrimeFDToHandle(drv_get_fd(drv_), hnd->fds[0], &id)) {
 		drv_log("drmPrimeFDToHandle failed.\n");
 		return -errno;
 	}
@@ -432,7 +340,7 @@ int32_t cros_gralloc_driver::retain(buffer_handle_t handle)
 			data.format_modifiers[plane] = hnd->format_modifier;
 		}
 
-		bo = drv_bo_import(drv, &data);
+		bo = drv_bo_import(drv_, &data);
 		if (!bo)
 			return -EFAULT;
 
@@ -661,9 +569,7 @@ int32_t cros_gralloc_driver::get_reserved_region(buffer_handle_t handle,
 
 uint32_t cros_gralloc_driver::get_resolved_drm_format(uint32_t drm_format, uint64_t usage)
 {
-	struct driver *drv = (usage & BO_USE_SCANOUT) ? drv_kms_ : drv_render_;
-
-	return drv_resolve_format(drv, drm_format, usage);
+	return drv_resolve_format(drv_, drm_format, usage);
 }
 
 cros_gralloc_buffer *cros_gralloc_driver::get_buffer(cros_gralloc_handle_t hnd)
diff --git a/cros_gralloc/cros_gralloc_driver.h b/cros_gralloc/cros_gralloc_driver.h
index bc3a46f..ec1fb48 100644
--- a/cros_gralloc/cros_gralloc_driver.h
+++ b/cros_gralloc/cros_gralloc_driver.h
@@ -50,10 +50,6 @@ class cros_gralloc_driver
 
 	void for_each_handle(const std::function<void(cros_gralloc_handle_t)> &function);
 
-	bool is_kmsro_enabled()
-	{
-		return drv_kms_ != drv_render_;
-	};
 	bool IsSupportedYUVFormat(uint32_t droid_format);
 
       private:
@@ -61,8 +57,7 @@ class cros_gralloc_driver
 	cros_gralloc_driver operator=(cros_gralloc_driver const &);
 	cros_gralloc_buffer *get_buffer(cros_gralloc_handle_t hnd);
 
-	struct driver *drv_kms_;
-	struct driver *drv_render_;
+	struct driver *drv_;
 	std::mutex mutex_;
 	std::unordered_map<uint32_t, cros_gralloc_buffer *> buffers_;
 	std::unordered_map<cros_gralloc_handle_t, std::pair<cros_gralloc_buffer *, int32_t>>
diff --git a/cros_gralloc/cros_gralloc_handle.h b/cros_gralloc/cros_gralloc_handle.h
index ae8e679..4c53899 100644
--- a/cros_gralloc/cros_gralloc_handle.h
+++ b/cros_gralloc/cros_gralloc_handle.h
@@ -27,7 +27,6 @@ struct cros_gralloc_handle {
 	uint32_t strides[DRV_MAX_PLANES];
 	uint32_t offsets[DRV_MAX_PLANES];
 	uint32_t sizes[DRV_MAX_PLANES];
-	bool from_kms;
 	uint32_t id;
 	uint32_t width;
 	uint32_t height;
diff --git a/cros_gralloc/gralloc1/cros_gralloc1_module.cc b/cros_gralloc/gralloc1/cros_gralloc1_module.cc
index 9a837e2..cbc4782 100644
--- a/cros_gralloc/gralloc1/cros_gralloc1_module.cc
+++ b/cros_gralloc/gralloc1/cros_gralloc1_module.cc
@@ -386,6 +386,11 @@ int32_t CrosGralloc1::allocate(struct cros_gralloc_buffer_descriptor *descriptor
 	    cros_gralloc1_convert_usage(descriptor->producer_usage, descriptor->consumer_usage);
 	descriptor->use_flags = usage;
 
+	if (!supported && (descriptor->consumer_usage & GRALLOC1_CONSUMER_USAGE_HWCOMPOSER)) {
+                 descriptor->use_flags &= ~BO_USE_SCANOUT;
+                 supported = driver->is_supported(descriptor);
+         }
+
 	if (!(driver->is_supported(descriptor))) {
 		drv_log("Unsupported combination -- HAL format: %u, HAL flags: %u, "
 			"drv_format: %u, drv_flags: %llu",
diff --git a/cros_gralloc/gralloc4/CrosGralloc4Allocator.cc b/cros_gralloc/gralloc4/CrosGralloc4Allocator.cc
index 47f81a6..c89c4bc 100644
--- a/cros_gralloc/gralloc4/CrosGralloc4Allocator.cc
+++ b/cros_gralloc/gralloc4/CrosGralloc4Allocator.cc
@@ -46,6 +46,13 @@ Error CrosGralloc4Allocator::allocate(const BufferDescriptorInfo& descriptor, ui
         return Error::UNSUPPORTED;
     }
 
+    bool supported = mDriver->is_supported(&crosDescriptor);
+    if (!supported && (descriptor.usage & BufferUsage::COMPOSER_OVERLAY)) {
+        crosDescriptor.use_flags &= ~BO_USE_SCANOUT;
+        supported = mDriver->is_supported(&crosDescriptor);
+    }
+
+
     if (!(mDriver->is_supported(&crosDescriptor))) {
         std::string drmFormatString = getDrmFormatString(crosDescriptor.drm_format);
         std::string pixelFormatString = getPixelFormatString(descriptor.format);
diff --git a/drv.c b/drv.c
index 3a30063..504bc2e 100644
--- a/drv.c
+++ b/drv.c
@@ -68,10 +68,9 @@ extern const struct backend backend_udl;
 #ifdef DRV_VC4
 extern const struct backend backend_vc4;
 #endif
-#ifdef DRV_VIRTIO_GPU
-extern const struct backend backend_virtio_gpu;
-#endif
+
 extern const struct backend backend_vgem;
+extern const struct backend backend_virtio_gpu;
 
 static const struct backend *drv_get_backend(int fd)
 {
@@ -123,10 +122,7 @@ static const struct backend *drv_get_backend(int fd)
 #ifdef DRV_VC4
 		&backend_vc4,
 #endif
-#ifdef DRV_VIRTIO_GPU
-		&backend_virtio_gpu,
-#endif
-		&backend_vgem,
+		&backend_vgem,	    &backend_virtio_gpu,
 	};
 
 	for (i = 0; i < ARRAY_SIZE(backend_list); i++) {
-- 
2.17.1

