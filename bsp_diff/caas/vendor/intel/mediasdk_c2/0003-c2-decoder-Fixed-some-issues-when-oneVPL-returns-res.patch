From b941fdf8b6d52774026e4784026f349d008e09dd Mon Sep 17 00:00:00 2001
From: gollarx <ratnakumarix.golla@intel.com>
Date: Tue, 28 Mar 2023 16:29:13 +0530
Subject: [PATCH] [c2][decoder] Fixed some issues when oneVPL returns
 resolution change

case: widevineH264AdaptiveWithRendererDisablingV18

1. prevent deleting bs which in use.
2. when oneVPL returns an error of resolution change,
it is not necessarily the width or height has changed.
however, we reinit the codec.
3. when deleting a work if it is not found, do not return a fatal
error directly.

Tracked-On: OAM-104972
Signed-off-by: gollarx <ratnakumarix.golla@intel.com>
---
 .../src/mfx_c2_decoder_component.cpp          | 46 +++++++++----------
 1 file changed, 22 insertions(+), 24 deletions(-)

diff --git a/c2_components/src/mfx_c2_decoder_component.cpp b/c2_components/src/mfx_c2_decoder_component.cpp
index d212997..c90336c 100755
--- a/c2_components/src/mfx_c2_decoder_component.cpp
+++ b/c2_components/src/mfx_c2_decoder_component.cpp
@@ -1289,7 +1289,6 @@ mfxStatus MfxC2DecoderComponent::HandleFormatChange()
 
     if (!m_mfxDecoder) return MFX_ERR_NULL_PTR;
 
-    bool need_realloc = false;
     mfx_res = m_mfxDecoder->DecodeHeader(m_c2Bitstream->GetFrameConstructor()->GetMfxBitstream().get(), &m_mfxVideoParams);
     MFX_DEBUG_TRACE__mfxStatus(mfx_res);
     if (MFX_ERR_NONE == mfx_res) {
@@ -1297,31 +1296,26 @@ mfxStatus MfxC2DecoderComponent::HandleFormatChange()
         mfxFrameAllocRequest decRequest = {};
         mfx_res = m_mfxDecoder->QueryIOSurf(&m_mfxVideoParams, &decRequest);
         if (MFX_ERR_NONE == mfx_res) {
-            if (m_mfxVideoParams.mfx.FrameInfo.Width != m_uMaxWidth ||
-                m_mfxVideoParams.mfx.FrameInfo.Height != m_uMaxHeight) {
-                need_realloc = true;
-            } else if (m_uOutputDelay < decRequest.NumFrameSuggested){
+            if (m_uOutputDelay < decRequest.NumFrameSuggested){
                 // This should never happen here as buffers with the maximum count are allocated
                 return MFX_ERR_MEMORY_ALLOC;
             }
-
-            if (need_realloc) {
-                // Free all the surfaces
-                mfx_res = m_mfxDecoder->Close();
-                if (MFX_ERR_NONE == mfx_res) {
-                    // De-allocate all the surfaces
-                    m_lockedSurfaces.clear();
-                    FreeSurfaces();
-                    if (m_allocator) {
-                        m_allocator->Reset();
-                    }
-                    // Re-init decoder
-                    m_bInitialized = false;
-                    m_uMaxWidth = m_mfxVideoParams.mfx.FrameInfo.Width;
-                    m_uMaxHeight = m_mfxVideoParams.mfx.FrameInfo.Height;
-                }
-            }
+	}
+    }
+ 
+    // Free all the surfaces
+    mfx_res = m_mfxDecoder->Close();
+    if (MFX_ERR_NONE == mfx_res) {
+        // De-allocate all the surfaces
+        m_lockedSurfaces.clear();
+        FreeSurfaces();
+        if (m_allocator) {
+            m_allocator->Reset();
         }
+        // Re-init decoder
+        m_bInitialized = false;
+        m_uMaxWidth = m_mfxVideoParams.mfx.FrameInfo.Width;
+        m_uMaxHeight = m_mfxVideoParams.mfx.FrameInfo.Height;
     }
 
     return mfx_res;
@@ -1947,6 +1941,7 @@ void MfxC2DecoderComponent::EmptyReadViews(uint64_t timestamp, uint64_t frame_in
 
     if (!IsDuplicatedTimeStamp(timestamp)) {
         ReleaseReadViews(frame_index);
+	return;
     }
 
     auto it = m_duplicatedTimeStamp.begin();
@@ -2170,8 +2165,9 @@ void MfxC2DecoderComponent::DoWork(std::unique_ptr<C2Work>&& work)
                 work = std::move(it->second);
                 m_pendingWorks.erase(it);
             } else {
-                MFX_DEBUG_TRACE_STREAM("Not found C2Work to return error result!!!");
-                FatalError(C2_CORRUPTED);
+                MFX_DEBUG_TRACE_STREAM("Not found C2Work, index = " << incoming_frame_index.peeku());
+		// If not found, it might be removed by WaitWork. We don't need to return an error.
+                // FatalError(C2_CORRUPTED);
             }
         }
         if (work) {
@@ -2309,6 +2305,7 @@ void MfxC2DecoderComponent::WaitWork(MfxC2FrameOut&& frame_out, mfxSyncPoint syn
 
         if (it != m_pendingWorks.end()) {
             work = std::move(it->second);
+	    MFX_DEBUG_TRACE_STREAM("Work removed: " << NAMED(work->input.ordinal.frameIndex.peeku()));
             m_pendingWorks.erase(it);
         }
     }
@@ -2438,6 +2435,7 @@ void MfxC2DecoderComponent::PushPending(std::unique_ptr<C2Work>&& work)
     auto it = m_pendingWorks.find(incoming_frame_index);
     if (it != m_pendingWorks.end()) { // Shouldn't be the same index there
         NotifyWorkDone(std::move(it->second), C2_CORRUPTED);
+	MFX_DEBUG_TRACE_STREAM("Work removed: " << NAMED(it->second->input.ordinal.frameIndex.peeku()));
         m_pendingWorks.erase(it);
     }
     m_pendingWorks.emplace(incoming_frame_index, std::move(work));
-- 
2.40.0

