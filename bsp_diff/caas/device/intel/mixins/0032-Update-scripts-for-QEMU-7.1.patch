From aa01021d85fca0734e0f8d5f226ee3ba9918bbe8 Mon Sep 17 00:00:00 2001
From: "Suresh, Prashanth" <prashanth.suresh@intel.com>
Date: Tue, 20 Sep 2022 11:57:10 +0530
Subject: [PATCH] Update scripts for QEMU 7.1

Change:
- updated path for QEMU 7.1 in scripts
- updated to use QEMUMonitorProtocol legacy interface

Tracked-On:
---
 groups/device-specific/caas/guest_pm_control | 25 +++++++++++++-------
 groups/device-specific/caas/wakeup.py        | 15 ++++++------
 2 files changed, 24 insertions(+), 16 deletions(-)

diff --git a/groups/device-specific/caas/guest_pm_control b/groups/device-specific/caas/guest_pm_control
index bd9ad52..fdebaf6 100755
--- a/groups/device-specific/caas/guest_pm_control
+++ b/groups/device-specific/caas/guest_pm_control
@@ -22,8 +22,16 @@ import subprocess
 import signal
 from sys import argv,exit
 
-sys.path.append(os.path.join(os.path.dirname(__file__), '../qemu-6.2.0/python'))
+sys.path.append(os.path.join(os.path.dirname(__file__), '../qemu-7.1.0/python'))
 from qemu import qmp
+from qemu.qmp.legacy import (
+    QEMUMonitorProtocol,
+    QMPMessage,
+    QMPReturnValue,
+)
+
+# connection timeout of two minutes
+con_timeout = 2*60
 
 rtc_wakeup = 0
 current_rtc_wakeup_count = 0
@@ -77,7 +85,7 @@ def main():
     # to connect to this unix socket. To avoid this failure delay of 2 second
     # has been kept. With this delay there is no connection failure.
     time.sleep(2)
-    qemu = qmp.QEMUMonitorProtocol(argv[1])
+    qemu = QEMUMonitorProtocol(argv[1])
 
     # Make a connection to QMP server. Break while loop only when the connection is made.
     # put a timeout 2 minutes if connection is not successful
@@ -85,18 +93,17 @@ def main():
     while True:
         try:
             qemu.connect()
-        except qmp.QMPConnectError:
-            print('Didn\'t get QMP greeting message from QEMU QMP server')
-        except qmp.QMPCapabilitiesError:
-            print('Could not negotiate capabilities with QEMU QMP server')
-        except qmp.QMPTimeoutError:
-            print('Connection Timeout Error')
-        except OSError:
+        except qmp.ConnectError:
             print
         else:
             print("connected to QEMU QMP server")
             break
 
+        if time.time() >= con_timeout + timeout_start:
+            print("connection timeout error")
+            return
+
+
     while True:
         try:
             # Pull the VM shutdown and reboot event from QEMU QMP Server
diff --git a/groups/device-specific/caas/wakeup.py b/groups/device-specific/caas/wakeup.py
index 9e8c9e1..cf34287 100755
--- a/groups/device-specific/caas/wakeup.py
+++ b/groups/device-specific/caas/wakeup.py
@@ -8,22 +8,23 @@ from sys import argv,exit
 
 timeout = 60
 
-sys.path.append(os.path.join(os.path.dirname(__file__), '../qemu-6.2.0/python'))
+sys.path.append(os.path.join(os.path.dirname(__file__), '../qemu-7.1.0/python'))
 
 from qemu import qmp
+from qemu.qmp.legacy import (
+    QEMUMonitorProtocol,
+    QMPMessage,
+    QMPReturnValue,
+)
 
 def main():
     timeout_start = time.time()
-    qemu = qmp.QEMUMonitorProtocol("/tmp/qmp-vinput-sock")
+    qemu = QEMUMonitorProtocol("/tmp/qmp-vinput-sock")
     while True:
         try:
             qemu.connect(negotiate=True)
             break
-        except qmp.QMPConnectError:
-            print('Didn\'t get QMP greeting message from QEMU QMP server')
-        except qmp.QMPCapabilitiesError:
-            print('Could not negotiate capabilities with QEMU QMP server')
-        except OSError:
+        except qmp.ConnectError:
             print
 
         if time.time() >= timeout + timeout_start:
-- 
2.37.3

